{"version":3,"file":"component---src-pages-szmdxposts-2-js-9249a64066b361b2ad60.js","mappings":"sLAGe,SAASA,IACxB,IAAMC,GAAOC,EAAAA,EAAAA,IAAe,aAQtBC,EAAcF,EAAKG,KAAKC,aAAaC,MACrCC,EAAcN,EAAKO,OAAOC,MAC3BC,QAAO,SAAAC,GAAI,QAAMA,EAAKC,KAAKC,YAAYC,QAE5C,OAAQ,gCAAE,iDAAyBX,EAAzB,WACLI,EAAYQ,KAAI,SAACJ,GAAW,IAAIK,EAAOL,EAAKC,KAAKC,YAAYI,OAC9D,OACE,gBAAC,IAAD,CAASC,IAAKP,EAAKC,KAAKO,GAAIC,KAAMT,EAAKC,KAAKS,MACvC,YAAaL,GAAkB,cAAe,2BAC9C,UAFL,KAEkBL,EAAKC,KAAKC,YAAYC,KAFxC,SAEmD,2BAC9C,YAAaH,EAAKC,KAAKC,YAAYP,MAHxC,QAGmD,2BAAM","sources":["webpack://hfixers/./src/pages/szmdxposts2.js"],"sourcesContent":["import { useStaticQuery, graphql, Link } from \"gatsby\"; import * as React from \"react\"; import * as szstyles from '@szass/szcss/szbooks.css';\r\nimport MuiLink from '@mui/material/Link';\r\n// import Layout from '@szcomps/layout'; import Seo from '@szcomps/seo';\r\nexport default function AllMdxPosts() { \r\nconst data = useStaticQuery(graphql` {\r\n  site { siteMetadata { title }    }\r\n  allMdx { edges { node { body excerpt(pruneLength: 160) frontmatter { author date (formatString: \"Do MMM YYYY\") description preview slug title type url } id slug timeToRead }    } \r\n          group(field: frontmatter___tags) { tag: fieldValue  totalCount }  }\r\n}`\r\n\r\n);\r\n// console.log(\"4 data=\"+JSON.stringify(data.allMdx.edges)) // .allMdx.edges tags keywords\r\nconst szsiteTitle = data.site.siteMetadata.title\r\nconst szedgesdata = data.allMdx.edges\r\n    .filter(edge => !!edge.node.frontmatter.date) // You can filter your posts based on some criteria\r\n  //  .map(edge => (<MuiLink key={edge.node.id} href={edge.node.slug}  >{edge.node.frontmatter.title}</MuiLink>))\r\nreturn (<><p>Here are some of the {szsiteTitle} pages:</p>\r\n    {szedgesdata.map((edge) => { let szname=edge.node.frontmatter.author\r\n    return (\r\n      <MuiLink key={edge.node.id} href={edge.node.slug} >\r\n          {' Author: '}{szname ? szname : ' uncredited' }<br />\r\n          {' Date: '}  {edge.node.frontmatter.date}      <br />\r\n          {' Title = '}{edge.node.frontmatter.title}     <br /><br />\r\n      </MuiLink>)     })  }\r\n </>);}\r\n/* export const pageQuery = graphql` query MyQuery { \r\n  site { siteMetadata { title }    }\r\n  allMdx { edges { node { body excerpt(pruneLength: 160) frontmatter { author date (formatString: \"Do MMM YYYY\") description preview slug title type url } id slug timeToRead }    } \r\n          group(field: frontmatter___tags) { tag: fieldValue  totalCount }  }\r\n}`;*/\r\n\r\n/* \r\n\r\nexport default IndexPage\r\n\r\nexport const pageQuery = graphql`query {allMarkdownRemark(sort: { order: DESC, fields: [frontmatter___date] }) {edges { node {id excerpt(pruneLength: 250) \r\n                                   frontmatter {date(formatString: \"MMMM DD, YYYY\") slug title } } } } }`;\r\n\r\n\r\nexport const pageQuery = graphql` SzAllMdxPostBySlug { site {siteMetadata {      title    }  }}  \r\n    AllMdx { id excerpt(pruneLength: 160) body frontmatter { title  date(formatString: \"MMMM DD, YYYY\")  description   }  }\r\n `;\r\n<Layout>  <Seo title=\"Programming Books Listing\" />\r\nexport const pageQuery = graphql`query MdxPostBySlug($id: String!  $previousPostId: String $nextPostId: String) {  site { siteMetadata { title }    }\r\n    mdx(          id: { eq: $id             }) { id excerpt(pruneLength: 160) body frontmatter { title  date(formatString: \"MMMM DD, YYYY\")  description   }  }\r\n    previous: mdx(id: { eq: $previousPostId }) { fields { slug } frontmatter { title   }  }\r\n    next: mdx(    id: { eq: $nextPostId     }) { fields { slug } frontmatter { title   }  }  }`;\r\n\r\n\r\nexport const pageQuery = graphql`query {\r\n  allMdx { edges {      node {        excerpt        id        body        frontmatter {          title          date          description        }      }    }  }} `;\r\nAllMdxPostBySlug { site {siteMetadata {      title    }  }}  \r\n<Layout>  <Seo title=\"Programming Books Listing\" />\r\n    mdx(          id: { eq: $id             }) { id excerpt(pruneLength: 160) body frontmatter { title  date(formatString: \"MMMM DD, YYYY\")  description   }  }\r\n    previous: mdx(id: { eq: $previousPostId }) { fields { slug } frontmatter { title   }  }\r\n    next: mdx(    id: { eq: $nextPostId     }) { fields { slug } frontmatter { title   }  }  \r\n*/"],"names":["AllMdxPosts","data","useStaticQuery","szsiteTitle","site","siteMetadata","title","szedgesdata","allMdx","edges","filter","edge","node","frontmatter","date","map","szname","author","key","id","href","slug"],"sourceRoot":""}